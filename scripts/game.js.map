{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/Asteroid.js",
    "src/Bullet.js",
    "src/MovingObject.js",
    "src/Player.js",
    "src/index.js",
    "src/sound.js",
    "src/utils.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import {getPointRotated} from 'utils';\n\nimport MovingObject from 'MovingObject';\n\nexport default class Asteroid extends MovingObject {\n  constructor(position, speed, size) {\n    super(position, speed);\n    this.size = size;\n    let rotX = 2 * Math.random() - 1;\n    let rotY = Math.random() < 0.5 ? Math.sqrt(1 - rotX ** 2) : -Math.sqrt(1 - rotX ** 2);\n    this.rotation = {x: rotX, y: rotY};\n\n\n    // randomized points for a variations of asteroids form\n    this.pointsBeforeRotation = [\n      [-12 * this.size, -12 * this.size],\n      [2 * this.size, -13 * Math.random() * this.size],\n      [(Math.random() * 2 + 8) * this.size, -8 * this.size],\n      [13 * this.size, 3 * this.size],\n      [(Math.random() * 2 + 6) * this.size, (Math.random() * 2 + 5) * this.size],\n      [3 * this.size, (Math.random() * 2 + 3) * this.size],\n      [-8 * this.size, 5 * this.size],\n      [(Math.random() * 2 - 12) * this.size,]\n    ];\n  }\n\n  update(options) {\n    const {ctx} = options;\n    this.updatePosition();\n    this.checkOutOfBoundaries();\n\n    ctx.beginPath();\n    ctx.strokeStyle = 'green';\n    ctx.fillStyle = 'lightgreen';\n\n    let point0 = {x: -13 * this.size, y: -5 * this.size};\n    point0 = getPointRotated(point0, this.position, this.rotation);\n    ctx.moveTo(point0.x, point0.y);\n\n    this.pointsBeforeRotation.forEach(point => {\n        let newPoint = getPointRotated({x: point[0], y: point[1]}, this.position, this.rotation);\n        ctx.lineTo(newPoint.x, newPoint.y);\n      }\n    );\n\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n  }\n}",
    "import { checkCollision} from 'utils';\n\nimport MovingObject from 'MovingObject';\n\nexport default class Bullet extends MovingObject {\n  constructor(position, speed) {\n    super(position, speed);\n  }\n\n  update(options) {\n    this.updatePosition();\n    let {x, y} = this.position;\n    const {ctx} = options;\n\n    checkCollision(ctx, this.position, this.hit);\n    this.checkOutOfBoundaries();\n    ctx.strokeStyle = 'black';\n    ctx.beginPath();\n    ctx.arc(x, y, 2, 0, 2 * Math.PI);\n    ctx.stroke();\n    ctx.closePath();\n  }\n}",
    "export default class MovingObject {\n  constructor(position, speed = {vx: 0, vy: 0}) {\n    this.position = position;\n    this.speed = speed;\n  }\n\n  updatePosition() {\n    this.position = {\n      x: this.position.x + this.speed.vx,\n      y: this.position.y + this.speed.vy\n    }\n  }\n}\n",
    "import {getPointRotated, checkCollision, addListener} from 'utils';\nimport MovingObject from 'MovingObject';\n\nexport default class Player extends MovingObject {\n\n  constructor(position, speed, accelerationDelta) {\n    super(position, speed, accelerationDelta);\n    this.maxSpeed = 5;\n    this.accelerationDelta = accelerationDelta;\n    this.init();\n  }\n\n  init() {\n    addListener(window, \"click\", () => {\n      this.shoot()\n    });\n\n    addListener(window, \"keypress\", (event) => {\n      switch (event.code) {\n        case 'KeyW':\n          if (this.speed.vy < 0) this.speed.vy -= this.accelerationDelta;\n          else this.speed.vy = -2 - this.accelerationDelta;\n          break;\n        case 'KeyS':\n          if (this.speed.vy > 0) this.speed.vy += this.accelerationDelta;\n          else this.speed.vy = 2 + this.accelerationDelta;\n\n          break;\n        case 'KeyA':\n          if (this.speed.vx < 0) this.speed.vx -= this.accelerationDelta;\n          else this.speed.vx = -2 - this.accelerationDelta;\n\n          break;\n        case 'KeyD':\n          if (this.speed.vx > 0) this.speed.vx += this.accelerationDelta;\n          else this.speed.vx = 2 + this.accelerationDelta;\n          break;\n        default:\n          break;\n      }\n      if (Math.abs(this.speed.vx) > this.maxSpeed) this.speed.vx = Math.sign(this.speed.vx) * this.maxSpeed;\n      if (Math.abs(this.speed.vy) > this.maxSpeed) this.speed.vy = Math.sign(this.speed.vy) * this.maxSpeed;\n    });\n  }\n\n  update(options) {\n    const {ctx, mouse} = options;\n    this.updatePosition();\n    let {x, y} = this.position;\n    this.checkOutOfBoundaries();\n\n    let point1 = getPointRotated({x: -10, y: -10}, this.position, null, mouse);\n    let point2 = getPointRotated({x: 20, y: 0}, this.position, null, mouse);\n    let point3 = getPointRotated({x: -10, y: 10}, this.position, null, mouse);\n\n    [point1, point2, point3].forEach((point) => checkCollision(ctx, point, this.crash));\n\n    ctx.beginPath();\n    ctx.strokeStyle = 'black';\n    ctx.moveTo(point1.x, point1.y);\n    ctx.lineTo(point2.x, point2.y);\n    ctx.lineTo(point3.x, point3.y);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.stroke();\n\n\n  }\n}",
    "import {calcDistance, addListener, removeListener, listeners} from 'utils';\r\nimport playSound from 'sound';\r\nimport Player from 'Player';\r\nimport Asteroid from 'Asteroid';\r\nimport Bullet from 'Bullet';\r\n\r\nexport default class Game {\r\n  constructor() {\r\n    this.container = document.getElementById('content');\r\n    this.canvas = document.getElementById('canvas');\r\n    this.ctx = this.canvas.getContext('2d');\r\n\r\n    this.height = 0;\r\n    this.width = 0;\r\n    this.center = {x: 0, y: 0};\r\n    this.mouse = {x: 0, y: 0};\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    addListener(window, \"resize\", x => this.onResize());\r\n    this.onResize();\r\n    this.onScoreScreen = false;\r\n    this.score = 0;\r\n    this.lives = 3;\r\n\r\n    this.player = new Player(this.center, {vx: 0, vy: 0}, 1);\r\n\r\n    this.asteroidSizes = [2, 3, 4, 7];\r\n    this.asteroids = this.initAsteroids();\r\n\r\n    this.bullets = [];\r\n\r\n    this.player.checkOutOfBoundaries = this.outOfBoundariesWrap(this.player);\r\n    addListener(this.canvas, 'mousemove', (event) => {\r\n      this.mouse = {x: event.offsetX, y: event.offsetY};\r\n    });\r\n    this.player.shoot = this.shoot();\r\n    this.player.crash = this.crash();\r\n\r\n\r\n    requestAnimationFrame((time) => this.update(time));\r\n  }\r\n\r\n  onResize() {\r\n    this.width = this.container.clientWidth;\r\n    this.height = this.container.clientHeight;\r\n    this.canvas.width = this.width;\r\n    this.canvas.height = this.height;\r\n    this.center = {x: Math.floor(this.width / 2), y: Math.floor(this.height / 2)};\r\n  }\r\n\r\n  initAsteroids() {\r\n    let arr = [];\r\n    while (arr.length < 7) {\r\n      arr.push(this.spawnAsteroid());\r\n    }\r\n    return arr\r\n  }\r\n\r\n  spawnAsteroid(size, position, speed) {\r\n    let side = Math.floor(Math.random() * 2);\r\n    const boundariesArray = [[0, 0.2 * this.width, 0, this.height], [0.8 * this.width, this.width, 0, this.height]];\r\n    let boundaries = boundariesArray[side];\r\n\r\n    let x, y;\r\n    let asteroidSize = size ? size : this.asteroidSizes[Math.floor(Math.random() * this.asteroidSizes.length)];\r\n\r\n    let timesTried = 0;\r\n    while (timesTried < 10) {\r\n      x = position ? position.x + timesTried * 20 : Math.random() * (boundaries[1] - boundaries[0]) + boundaries[0];\r\n      y = position ? position.y + timesTried * 20 : Math.random() * (boundaries[2] - boundaries[3]) + boundaries[2];\r\n\r\n      if (calcDistance({x, y}, this.player.position) > asteroidSize * 15) {\r\n        timesTried = timesTried + 10;\r\n      }\r\n      timesTried++;\r\n    }\r\n    let vx = speed ? speed.vx : (Math.random() * 5) - 2.5;\r\n    let vy = speed ? speed.vy : (Math.random() * 5) - 2.5;\r\n    let asteroid = new Asteroid({x: x, y: y}, {vx, vy}, asteroidSize);\r\n    asteroid.checkOutOfBoundaries = this.outOfBoundariesWrap(asteroid);\r\n    return asteroid;\r\n}\r\n\r\nshoot()\r\n{\r\n  return () => {\r\n    const bulletSpeed = 5;\r\n    const vector = {vx: this.mouse.x - this.player.position.x, vy: this.mouse.y - this.player.position.y};\r\n    const vectorLength = calcDistance(this.mouse, this.player.position);\r\n    const vectorNormalized = {\r\n      vx: bulletSpeed * (vector.vx / vectorLength),\r\n      vy: bulletSpeed * (vector.vy / vectorLength)\r\n    };\r\n    let bullet = new Bullet(this.player.position, vectorNormalized);\r\n    this.bullets.push(bullet);\r\n\r\n    let noviceShot = this.outOfBoundariesDestroy(bullet, this.bullets.length - 1);\r\n    let veteranShot = this.outOfBoundariesBounce(bullet);\r\n\r\n    bullet.checkOutOfBoundaries = this.score < 4000 ? noviceShot : veteranShot; // small advantage for the player after a good score\r\n    bullet.hit = this.bulletHit(bullet);\r\n  }\r\n}\r\n;\r\n\r\nbulletHit(bullet)\r\n{\r\n  return () => {\r\n    let checkDistance = 150;\r\n    const asteroidSizes = this.asteroidSizes;\r\n    let nearest = null;\r\n    for (let asteroid of this.asteroids) {\r\n      const distance = calcDistance(asteroid.position, bullet.position);\r\n      if (checkDistance > distance) {\r\n        checkDistance = distance;\r\n        nearest = asteroid;\r\n      }\r\n      if (checkDistance < 13) break;\r\n    }\r\n\r\n    this.bullets.splice(this.bullets.indexOf(bullet), 1);\r\n    if (nearest) { //additional check for simultaneous collisions\r\n      const asteroidIndex = this.asteroids.indexOf(nearest);\r\n\r\n      if (nearest.size > asteroidSizes[0]) {\r\n        let newSize = asteroidSizes[asteroidSizes.indexOf(nearest.size) - 1];\r\n        let newSpeed1 = {\r\n          vx: nearest.speed.vx + Math.random() * 2 - 1,\r\n          vy: nearest.speed.vy + Math.random() * 2 - 1\r\n        };\r\n        let newSpeed2 = {\r\n          vx: nearest.speed.vx + Math.random() * 2 - 1,\r\n          vy: nearest.speed.vy + Math.random() * 2 - 1\r\n        };\r\n        this.asteroids.push(this.spawnAsteroid(newSize, nearest.position, newSpeed1));\r\n        this.asteroids.push(this.spawnAsteroid(newSize, nearest.position, newSpeed2));\r\n      } else {\r\n        this.asteroids.push(this.spawnAsteroid());\r\n      }\r\n      this.score += 10 * nearest.size;\r\n      this.asteroids.splice(asteroidIndex, 1);\r\n      playSound(440, 220);\r\n    }\r\n  }\r\n}\r\n\r\noutOfBoundariesBounce(bullet)\r\n{\r\n  return () => {\r\n    const {x, y} = bullet.position;\r\n    if (x > this.width || x < 0) bullet.speed.vx = -bullet.speed.vx;\r\n    if (y > this.height || y < 0) bullet.speed.vy = -bullet.speed.vy;\r\n  }\r\n}\r\n\r\noutOfBoundariesDestroy(bullet)\r\n{\r\n  return () => {\r\n    const {x, y} = bullet.position;\r\n\r\n    if (x > this.width || y > this.height || x < 0 || y < 0) {\r\n      const index = this.bullets.indexOf(bullet);\r\n      this.bullets.splice(index, 1)\r\n    }\r\n  }\r\n}\r\n\r\ncrash()\r\n{\r\n  return () => {\r\n    if (this.lives === 1) this.gameOver();\r\n    else {\r\n      this.lives--;\r\n      playSound(55, 135);\r\n      // removing all of the asteroids on the spawn\r\n      const checkDistance = 200;\r\n      this.asteroids = this.asteroids.filter(asteroid => {\r\n        const distance = calcDistance(asteroid.position, this.center);\r\n        return checkDistance < distance\r\n      });\r\n      this.player.position.x = this.center.x;\r\n      this.player.position.y = this.center.y;\r\n\r\n      this.player.speed.vx = 0;\r\n      this.player.speed.vy = 0;\r\n    }\r\n  }\r\n}\r\n\r\noutOfBoundariesWrap(object)\r\n{\r\n  return () => {\r\n    if (object.position.x > this.width) object.position.x = 0;\r\n    if (object.position.y > this.height) object.position.y = 0;\r\n    if (object.position.x < 0) object.position.x = this.width;\r\n    if (object.position.y < 0) object.position.y = this.height;\r\n  }\r\n}\r\n\r\nupdate(time)\r\n{\r\n  this.ctx.clearRect(0, 0, this.width, this.height);\r\n\r\n  this.asteroids.forEach(asteroid => {\r\n    asteroid.update({ctx: this.ctx});\r\n  });\r\n  this.player.update({ctx: this.ctx, mouse: this.mouse});\r\n\r\n  this.bullets.forEach(bullet => {\r\n    bullet.update({ctx: this.ctx});\r\n  });\r\n\r\n\r\n  if (!this.onScoreScreen) {\r\n    this.ctx.font = \"24px Helvetica\";\r\n\r\n    this.ctx.strokeText(`score: ${this.score}\\n lives: ${this.lives}`, 10, 50);\r\n    requestAnimationFrame((time) => this.update(time));\r\n  }\r\n}\r\n\r\ngameOver()\r\n{\r\n  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  playSound(55, 57, 1000);\r\n\r\n  this.onScoreScreen = true;\r\n  this.ctx.font = \"64px Helvetica\";\r\n  this.ctx.strokeStyle = 'green';\r\n  addListener(window, \"keypress\", (event) => {\r\n    if (event.code === \"KeyR\") startNewGame();\r\n  });\r\n\r\n  this.ctx.strokeText(`GAME OVER`, this.center.x - 128, this.center.y - 64);\r\n  this.ctx.strokeText(`Score: ${this.score}`, this.center.x - 128, this.center.y);\r\n  this.ctx.strokeText(`press R to restart`, this.center.x - 128, this.center.y + 64);\r\n}\r\n}\r\n\r\nfunction startNewGame() {\r\n  listeners.forEach(listener => removeListener(listener.target, listener.event, listener.handler));\r\n  new Game();\r\n}\r\n\r\nstartNewGame();",
    "const audioContext = new (window.AudioContext || window.webkitAudioContext);\nlet masterGainNode = audioContext.createGain();\nmasterGainNode.connect(audioContext.destination);\nmasterGainNode.gain.value = 0.001;\n\nfunction playSound(freq1, freq2, duration = 100) { // two notes frequencies and optional duration of them\n\n  const osc1 = audioContext.createOscillator();\n  const osc2 = audioContext.createOscillator();\n\n  osc1.type = 'square';\n  osc2.type = 'sawtooth';\n  osc1.frequency.value = freq1;\n  osc2.frequency.value = freq2;\n  osc1.connect(masterGainNode);\n  osc2.connect(masterGainNode);\n  osc1.start(0);\n  osc2.start(0);\n\n  setTimeout(() => {\n    osc1.stop();\n    osc2.stop();\n  }, duration)\n}\n\nexport default playSound;",
    "function calcDistance(point1, point2) {\n  return Math.sqrt((point2.x - point1.x) ** 2 + (point2.y - point1.y) ** 2);\n}\n\nfunction getPointRotated(point, origin, rotation, direction = null) { // direction used to calculate rotation to a specific point\n\n  let cos, sin;\n  if (!direction) {\n    cos = rotation.x;\n    sin = rotation.y;\n  } else {\n    const vectorShifted = {x: direction.x - origin.x, y: direction.y - origin.y};\n    const vectorLength = calcDistance(origin, direction);\n    const normVector = {\n      x: vectorShifted.x / vectorLength,\n      y: vectorShifted.y / vectorLength\n    };\n    cos = normVector.x;\n    sin = normVector.y;\n  }\n  return {\n    x: origin.x + point.x * cos - point.y * sin,\n    y: origin.y + point.x * sin + point.y * cos\n  };\n}\n\n\nfunction checkCollision(ctx, point, cb) {\n  const collisionPixel = ctx.getImageData(point.x, point.y, 1, 1); //green pixels check is enough for detecting asteroid hit\n  const green = collisionPixel.data[1];\n  if (green > 230) cb();\n}\n\n//-- Listeners handling\nconst listeners = [];\n\nfunction addListener(target, event, handler) {\n  target.addEventListener(event, handler);\n  listeners.push({target, event, handler});\n}\n\nfunction removeListener(target, event, handler) {\n  target.removeEventListener(event, handler);\n}\n\nexport {calcDistance, checkCollision, getPointRotated, addListener, removeListener, listeners};\n"
  ]
}